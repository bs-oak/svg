// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Encode$BsOakJson = require("@bs-oak/json/src/encode.bs.js");
var Virtual_dom$BsOakVirtualDom = require("@bs-oak/virtual-dom/src/virtual_dom.bs.js");

var text = Virtual_dom$BsOakVirtualDom.Node[/* text */0];

function node(tag, properties, children) {
  var namespace = Virtual_dom$BsOakVirtualDom.Property[/* create */0]("namespace", Encode$BsOakJson.string("http://www.w3.org/2000/svg"));
  return Virtual_dom$BsOakVirtualDom.Node[/* node */1](tag, /* :: */[
              namespace,
              properties
            ], children);
}

var map = Virtual_dom$BsOakVirtualDom.Node[/* map */2];

function svg(p, c) {
  return node("svg", p, c);
}

function foreign_object(p, c) {
  return node("foreignObject", p, c);
}

function circle(p, c) {
  return node("circle", p, c);
}

function ellipse(p, c) {
  return node("ellipse", p, c);
}

function image(p, c) {
  return node("image", p, c);
}

function line(p, c) {
  return node("line", p, c);
}

function path(p, c) {
  return node("path", p, c);
}

function polygon(p, c) {
  return node("polygon", p, c);
}

function polyline(p, c) {
  return node("polyline", p, c);
}

function rect(p, c) {
  return node("rect", p, c);
}

function use(p, c) {
  return node("use", p, c);
}

function animate(p, c) {
  return node("animate", p, c);
}

function animate_color(p, c) {
  return node("animateColor", p, c);
}

function animate_motion(p, c) {
  return node("animateMotion", p, c);
}

function animate_transform(p, c) {
  return node("animateTransform", p, c);
}

function mpath(p, c) {
  return node("mpath", p, c);
}

function set(p, c) {
  return node("set", p, c);
}

function desc(p, c) {
  return node("desc", p, c);
}

function metadata(p, c) {
  return node("metadata", p, c);
}

function title(p, c) {
  return node("title", p, c);
}

function a(p, c) {
  return node("a", p, c);
}

function defs(p, c) {
  return node("defs", p, c);
}

function g(p, c) {
  return node("g", p, c);
}

function marker(p, c) {
  return node("marker", p, c);
}

function mask(p, c) {
  return node("mask", p, c);
}

function pattern(p, c) {
  return node("pattern", p, c);
}

function $$switch(p, c) {
  return node("switch", p, c);
}

function symbol(p, c) {
  return node("symbol", p, c);
}

function alt_glyph(p, c) {
  return node("altGlyph", p, c);
}

function alt_glyph_def(p, c) {
  return node("altGlyphDef", p, c);
}

function alt_glyph_item(p, c) {
  return node("altGlyphItem", p, c);
}

function glyph(p, c) {
  return node("glyph", p, c);
}

function glyph_ref(p, c) {
  return node("glyphRef", p, c);
}

function text_path(p, c) {
  return node("textPath", p, c);
}

function text$prime(p, c) {
  return node("text", p, c);
}

function tref(p, c) {
  return node("tref", p, c);
}

function tspan(p, c) {
  return node("tspan", p, c);
}

function font(p, c) {
  return node("font", p, c);
}

function linear_gradient(p, c) {
  return node("linearGradient", p, c);
}

function radial_gradient(p, c) {
  return node("radialGradient", p, c);
}

function stop(p, c) {
  return node("stop", p, c);
}

function fe_blend(p, c) {
  return node("feBlend", p, c);
}

function fe_color_matrix(p, c) {
  return node("feColorMatrix", p, c);
}

function fe_component_transfer(p, c) {
  return node("feComponentTransfer", p, c);
}

function fe_composite(p, c) {
  return node("feComposite", p, c);
}

function fe_convolve_matrix(p, c) {
  return node("feConvolveMatrix", p, c);
}

function fe_diffuse_lighting(p, c) {
  return node("feDiffuseLighting", p, c);
}

function fe_displacement_map(p, c) {
  return node("feDisplacementMap", p, c);
}

function fe_flood(p, c) {
  return node("feFlood", p, c);
}

function fe_func_a(p, c) {
  return node("feFuncA", p, c);
}

function fe_func_b(p, c) {
  return node("feFuncB", p, c);
}

function fe_func_g(p, c) {
  return node("feFuncG", p, c);
}

function fe_func_r(p, c) {
  return node("feFuncR", p, c);
}

function fe_gaussian_blur(p, c) {
  return node("feGaussianBlur", p, c);
}

function fe_image(p, c) {
  return node("feImage", p, c);
}

function fe_merge(p, c) {
  return node("feMerge", p, c);
}

function fe_merge_node(p, c) {
  return node("feMergeNode", p, c);
}

function fe_morphology(p, c) {
  return node("feMorphology", p, c);
}

function fe_offset(p, c) {
  return node("feOffset", p, c);
}

function fe_specular_lighting(p, c) {
  return node("feSpecularLighting", p, c);
}

function fe_tile(p, c) {
  return node("feTile", p, c);
}

function fe_turbulence(p, c) {
  return node("feTurbulence", p, c);
}

function fe_distant_light(p, c) {
  return node("feDistantLight", p, c);
}

function fe_point_light(p, c) {
  return node("fePointLight", p, c);
}

function fe_spot_light(p, c) {
  return node("feSpotLight", p, c);
}

function clip_path(p, c) {
  return node("clipPath", p, c);
}

function color_profile(p, c) {
  return node("colorProfile", p, c);
}

function cursor(p, c) {
  return node("cursor", p, c);
}

function filter(p, c) {
  return node("filter", p, c);
}

function style(p, c) {
  return node("style", p, c);
}

function view(p, c) {
  return node("view", p, c);
}

exports.text = text;
exports.node = node;
exports.map = map;
exports.svg = svg;
exports.foreign_object = foreign_object;
exports.circle = circle;
exports.ellipse = ellipse;
exports.image = image;
exports.line = line;
exports.path = path;
exports.polygon = polygon;
exports.polyline = polyline;
exports.rect = rect;
exports.use = use;
exports.animate = animate;
exports.animate_color = animate_color;
exports.animate_motion = animate_motion;
exports.animate_transform = animate_transform;
exports.mpath = mpath;
exports.set = set;
exports.desc = desc;
exports.metadata = metadata;
exports.title = title;
exports.a = a;
exports.defs = defs;
exports.g = g;
exports.marker = marker;
exports.mask = mask;
exports.pattern = pattern;
exports.$$switch = $$switch;
exports.symbol = symbol;
exports.alt_glyph = alt_glyph;
exports.alt_glyph_def = alt_glyph_def;
exports.alt_glyph_item = alt_glyph_item;
exports.glyph = glyph;
exports.glyph_ref = glyph_ref;
exports.text_path = text_path;
exports.text$prime = text$prime;
exports.tref = tref;
exports.tspan = tspan;
exports.font = font;
exports.linear_gradient = linear_gradient;
exports.radial_gradient = radial_gradient;
exports.stop = stop;
exports.fe_blend = fe_blend;
exports.fe_color_matrix = fe_color_matrix;
exports.fe_component_transfer = fe_component_transfer;
exports.fe_composite = fe_composite;
exports.fe_convolve_matrix = fe_convolve_matrix;
exports.fe_diffuse_lighting = fe_diffuse_lighting;
exports.fe_displacement_map = fe_displacement_map;
exports.fe_flood = fe_flood;
exports.fe_func_a = fe_func_a;
exports.fe_func_b = fe_func_b;
exports.fe_func_g = fe_func_g;
exports.fe_func_r = fe_func_r;
exports.fe_gaussian_blur = fe_gaussian_blur;
exports.fe_image = fe_image;
exports.fe_merge = fe_merge;
exports.fe_merge_node = fe_merge_node;
exports.fe_morphology = fe_morphology;
exports.fe_offset = fe_offset;
exports.fe_specular_lighting = fe_specular_lighting;
exports.fe_tile = fe_tile;
exports.fe_turbulence = fe_turbulence;
exports.fe_distant_light = fe_distant_light;
exports.fe_point_light = fe_point_light;
exports.fe_spot_light = fe_spot_light;
exports.clip_path = clip_path;
exports.color_profile = color_profile;
exports.cursor = cursor;
exports.filter = filter;
exports.style = style;
exports.view = view;
/* Encode-BsOakJson Not a pure module */
