// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Block = require("bs-platform/lib/js/block.js");
var Decode$BsOakJson = require("@bs-oak/json/src/decode.bs.js");
var Virtual_dom$BsOakVirtualDom = require("@bs-oak/virtual-dom/src/virtual_dom.bs.js");

function no_javascript_uri(s) {
  var re = (/^javascript:/i);
  var tester = s.replace((/\s/g), "");
  if (re.test(tester)) {
    return "";
  } else {
    return s;
  }
}

function accent_height(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("accent-height", v);
}

function accelerate(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("accelerate", v);
}

function accumulate(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("accumulate", v);
}

function additive(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("additive", v);
}

function alphabetic(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("alphabetic", v);
}

function allow_reorder(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("allowReorder", v);
}

function amplitude(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("amplitude", v);
}

function arabic_form(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("arabic-form", v);
}

function ascent(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("ascent", v);
}

function attribute_name(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("attributeName", v);
}

function attribute_type(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("attributeType", v);
}

function auto_reverse(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("autoReverse", v);
}

function azimuth(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("azimuth", v);
}

function base_frequency(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("baseFrequency", v);
}

function base_profile(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("baseProfile", v);
}

function bbox(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("bbox", v);
}

function begin$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("begin", v);
}

function bias(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("bias", v);
}

function by(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("by", no_javascript_uri(v));
}

function calc_mode(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("calcMode", v);
}

function cap_height(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("cap-height", v);
}

function class$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("class", v);
}

function clip_path_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("clipPathUnits", v);
}

function content_script_type(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("contentScriptType", v);
}

function content_style_type(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("contentStyleType", v);
}

function cx(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("cx", v);
}

function cy(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("cy", v);
}

function d(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("d", v);
}

function decelerate(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("decelerate", v);
}

function descent(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("descent", v);
}

function diffuse_constant(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("diffuseConstant", v);
}

function divisor(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("divisor", v);
}

function dur(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("dur", v);
}

function dx(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("dx", v);
}

function dy(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("dy", v);
}

function edge_mode(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("edgeMode", v);
}

function elevation(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("elevation", v);
}

function end$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("end", v);
}

function exponent(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("exponent", v);
}

function external_resources_required(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("externalResourcesRequired", v);
}

function filter_res(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("filterRes", v);
}

function filter_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("filterUnits", v);
}

function format(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("format", v);
}

function from(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("from", no_javascript_uri(v));
}

function fx(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("fx", v);
}

function fy(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("fy", v);
}

function g1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("g1", v);
}

function g2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("g2", v);
}

function glyph_name(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("glyph-name", v);
}

function glyph_ref(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("glyphRef", v);
}

function gradient_transform(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("gradientTransform", v);
}

function gradient_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("gradientUnits", v);
}

function hanging(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("hanging", v);
}

function height(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("height", v);
}

function horiz_adv_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("horiz-adv-x", v);
}

function horiz_origin_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("horiz-origin-x", v);
}

function horiz_origin_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("horiz-origin-y", v);
}

function id(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("id", v);
}

function ideographic(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("ideographic", v);
}

function in$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("in", v);
}

function in2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("in2", v);
}

function intercept(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("intercept", v);
}

function k(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("k", v);
}

function k1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("k1", v);
}

function k2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("k2", v);
}

function k3(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("k3", v);
}

function k4(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("k4", v);
}

function kernel_matrix(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("kernelMatrix", v);
}

function kernel_unit_length(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("kernelUnitLength", v);
}

function key_points(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("keyPoints", v);
}

function key_splines(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("keySplines", v);
}

function key_times(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("keyTimes", v);
}

function lang(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("lang", v);
}

function length_adjust(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("lengthAdjust", v);
}

function limiting_cone_angle(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("limitingConeAngle", v);
}

function local(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("local", v);
}

function marker_height(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("markerHeight", v);
}

function marker_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("markerUnits", v);
}

function marker_width(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("markerWidth", v);
}

function mask_content_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("maskContentUnits", v);
}

function mask_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("maskUnits", v);
}

function mathematical(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("mathematical", v);
}

function max(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("max", v);
}

function media(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("media", v);
}

function method$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("method", v);
}

function min(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("min", v);
}

function mode(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("mode", v);
}

function name(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("name", v);
}

function num_octaves(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("numOctaves", v);
}

function offset(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("offset", v);
}

function operator(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("operator", v);
}

function order(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("order", v);
}

function orient(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("orient", v);
}

function orientation(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("orientation", v);
}

function origin(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("origin", v);
}

function overline_position(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("overline-position", v);
}

function overline_thickness(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("overline-thickness", v);
}

function panose1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("panose-1", v);
}

function path(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("path", v);
}

function path_length(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("pathLength", v);
}

function pattern_content_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("patternContentUnits", v);
}

function pattern_transform(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("patternTransform", v);
}

function pattern_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("patternUnits", v);
}

function point_order(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("point-order", v);
}

function points(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("points", v);
}

function points_at_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("pointsAtX", v);
}

function points_at_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("pointsAtY", v);
}

function points_at_z(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("pointsAtZ", v);
}

function preserve_alpha(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("preserveAlpha", v);
}

function preserve_aspect_ratio(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("preserveAspectRatio", v);
}

function primitive_units(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("primitiveUnits", v);
}

function r(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("r", v);
}

function radius(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("radius", v);
}

function ref_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("refX", v);
}

function ref_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("refY", v);
}

function rendering_intent(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("rendering-intent", v);
}

function repeat_count(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("repeatCount", v);
}

function repeat_dur(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("repeatDur", v);
}

function required_extensions(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("requiredExtensions", v);
}

function required_features(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("requiredFeatures", v);
}

function restart(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("restart", v);
}

function result(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("result", v);
}

function rotate(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("rotate", v);
}

function rx(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("rx", v);
}

function ry(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("ry", v);
}

function scale(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("scale", v);
}

function seed(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("seed", v);
}

function slope(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("slope", v);
}

function spacing(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("spacing", v);
}

function specular_constant(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("specularConstant", v);
}

function specular_exponent(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("specularExponent", v);
}

function speed(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("speed", v);
}

function spread_method(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("spreadMethod", v);
}

function start_offset(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("startOffset", v);
}

function std_deviation(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stdDeviation", v);
}

function stemh(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stemh", v);
}

function stemv(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stemv", v);
}

function stitch_tiles(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stitchTiles", v);
}

function strikethrough_position(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("strikethrough-position", v);
}

function strikethrough_thickness(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("strikethrough-thickness", v);
}

function string$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("string", v);
}

function style(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("style", v);
}

function surface_scale(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("surfaceScale", v);
}

function system_language(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("systemLanguage", v);
}

function table_values(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("tableValues", v);
}

function target(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("target", v);
}

function target_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("targetX", v);
}

function target_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("targetY", v);
}

function text_length(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("textLength", v);
}

function title(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("title", v);
}

function to$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("to", no_javascript_uri(v));
}

function transform(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("transform", v);
}

function type$prime(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("type", v);
}

function u1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("u1", v);
}

function u2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("u2", v);
}

function underline_position(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("underline-position", v);
}

function underline_thickness(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("underline-thickness", v);
}

function unicode(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("unicode", v);
}

function unicode_range(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("unicode-range", v);
}

function units_per_em(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("units-per-em", v);
}

function v_alphabetic(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("v-alphabetic", v);
}

function v_hanging(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("v-hanging", v);
}

function v_ideographic(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("v-ideographic", v);
}

function v_mathematical(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("v-mathematical", v);
}

function values(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("values", no_javascript_uri(v));
}

function version(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("version", v);
}

function vert_adv_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("vert-adv-y", v);
}

function vert_origin_x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("vert-origin-x", v);
}

function vert_origin_y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("vert-origin-y", v);
}

function view_box(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("viewBox", v);
}

function view_target(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("viewTarget", v);
}

function width(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("width", v);
}

function widths(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("widths", v);
}

function x(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("x", v);
}

function x_height(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("x-height", v);
}

function x1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("x1", v);
}

function x2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("x2", v);
}

function x_channel_selector(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("xChannelSelector", v);
}

function xlink_actuate(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:actuate", v);
}

function xlink_arcrole(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:arcrole", v);
}

function xlink_href(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:href", no_javascript_uri(v));
}

function xlink_role(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:role", v);
}

function xlink_show(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:show", v);
}

function xlink_title(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:title", v);
}

function xlink_type(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/1999/xlink", "xlink:type", v);
}

function xml_base(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/XML/1998/namespace", "xml:base", v);
}

function xml_lang(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/XML/1998/namespace", "xml:lang", v);
}

function xml_space(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute_ns */1]("http://www.w3.org/XML/1998/namespace", "xml:space", v);
}

function y(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("y", v);
}

function y1(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("y1", v);
}

function y2(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("y2", v);
}

function y_channel_selector(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("yChannelSelector", v);
}

function z(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("z", v);
}

function zoom_and_pan(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("zoomAndPan", v);
}

function alignment_baseline(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("alignment-baseline", v);
}

function baseline_shift(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("baseline-shift", v);
}

function clip_path(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("clip-path", v);
}

function clip_rule(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("clip-rule", v);
}

function clip(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("clip", v);
}

function color_interpolation_filters(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("color-interpolation-filters", v);
}

function color_interpolation(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("color-interpolation", v);
}

function color_profile(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("color-profile", v);
}

function color_rendering(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("color-rendering", v);
}

function color(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("color", v);
}

function cursor(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("cursor", v);
}

function direction(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("direction", v);
}

function display(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("display", v);
}

function dominant_baseline(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("dominant-baseline", v);
}

function enable_background(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("enable-background", v);
}

function fill_opacity(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("fill-opacity", v);
}

function fill_rule(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("fill-rule", v);
}

function fill(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("fill", v);
}

function filter(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("filter", v);
}

function flood_color(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("flood-color", v);
}

function flood_opacity(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("flood-opacity", v);
}

function font_family(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-family", v);
}

function font_size_adjust(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-size-adjust", v);
}

function font_size(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-size", v);
}

function font_stretch(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-stretch", v);
}

function font_style(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-style", v);
}

function font_variant(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-variant", v);
}

function font_weight(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("font-weight", v);
}

function glyph_orientation_horizontal(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("glyph-orientation-horizontal", v);
}

function glyph_orientation_vertical(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("glyph-orientation-vertical", v);
}

function image_rendering(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("image-rendering", v);
}

function kerning(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("kerning", v);
}

function letter_spacing(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("letter-spacing", v);
}

function lighting_color(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("lighting-color", v);
}

function marker_end(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("marker-end", v);
}

function marker_mid(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("marker-mid", v);
}

function marker_start(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("marker-start", v);
}

function mask(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("mask", v);
}

function opacity(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("opacity", v);
}

function overflow(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("overflow", v);
}

function pointer_events(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("pointer-events", v);
}

function shape_rendering(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("shape-rendering", v);
}

function stop_color(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stop-color", v);
}

function stop_opacity(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stop-opacity", v);
}

function stroke_dasharray(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-dasharray", v);
}

function stroke_dashoffset(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-dashoffset", v);
}

function stroke_linecap(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-linecap", v);
}

function stroke_linejoin(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-linejoin", v);
}

function stroke_miterlimit(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-miterlimit", v);
}

function stroke_opacity(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-opacity", v);
}

function stroke_width(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke-width", v);
}

function stroke(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("stroke", v);
}

function text_anchor(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("text-anchor", v);
}

function text_decoration(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("text-decoration", v);
}

function text_rendering(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("text-rendering", v);
}

function unicode_bidi(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("unicode-bidi", v);
}

function visibility(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("visibility", v);
}

function word_spacing(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("word-spacing", v);
}

function writing_mode(v) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* attribute */0]("writing-mode", v);
}

function on($$event, decoder) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* on */3]($$event, /* Normal */Block.__(0, [decoder]));
}

function prevent_default_on($$event, decoder) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* on */3]($$event, /* MayPreventDefault */Block.__(2, [decoder]));
}

function stop_propagation_on($$event, decoder) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* on */3]($$event, /* MayStopPropagation */Block.__(1, [decoder]));
}

function custom($$event, decoder) {
  return Virtual_dom$BsOakVirtualDom.Attribute[/* on */3]($$event, /* Custom */Block.__(3, [decoder]));
}

function on_click(msg) {
  return on("onclick", (function (param) {
                return Decode$BsOakJson.succeed(msg, param);
              }));
}

function on_mouse_down(msg) {
  return on("mousedown", (function (param) {
                return Decode$BsOakJson.succeed(msg, param);
              }));
}

function on_mouse_up(msg) {
  return on("mouseup", (function (param) {
                return Decode$BsOakJson.succeed(msg, param);
              }));
}

function on_mouse_over(msg) {
  return on("mouseover", (function (param) {
                return Decode$BsOakJson.succeed(msg, param);
              }));
}

function on_mouse_out(msg) {
  return on("mouseout", (function (param) {
                return Decode$BsOakJson.succeed(msg, param);
              }));
}

exports.accent_height = accent_height;
exports.accelerate = accelerate;
exports.accumulate = accumulate;
exports.additive = additive;
exports.alphabetic = alphabetic;
exports.allow_reorder = allow_reorder;
exports.amplitude = amplitude;
exports.arabic_form = arabic_form;
exports.ascent = ascent;
exports.attribute_name = attribute_name;
exports.attribute_type = attribute_type;
exports.auto_reverse = auto_reverse;
exports.azimuth = azimuth;
exports.base_frequency = base_frequency;
exports.base_profile = base_profile;
exports.bbox = bbox;
exports.begin$prime = begin$prime;
exports.bias = bias;
exports.by = by;
exports.calc_mode = calc_mode;
exports.cap_height = cap_height;
exports.class$prime = class$prime;
exports.clip_path_units = clip_path_units;
exports.content_script_type = content_script_type;
exports.content_style_type = content_style_type;
exports.cx = cx;
exports.cy = cy;
exports.d = d;
exports.decelerate = decelerate;
exports.descent = descent;
exports.diffuse_constant = diffuse_constant;
exports.divisor = divisor;
exports.dur = dur;
exports.dx = dx;
exports.dy = dy;
exports.edge_mode = edge_mode;
exports.elevation = elevation;
exports.end$prime = end$prime;
exports.exponent = exponent;
exports.external_resources_required = external_resources_required;
exports.filter_res = filter_res;
exports.filter_units = filter_units;
exports.format = format;
exports.from = from;
exports.fx = fx;
exports.fy = fy;
exports.g1 = g1;
exports.g2 = g2;
exports.glyph_name = glyph_name;
exports.glyph_ref = glyph_ref;
exports.gradient_transform = gradient_transform;
exports.gradient_units = gradient_units;
exports.hanging = hanging;
exports.height = height;
exports.horiz_adv_x = horiz_adv_x;
exports.horiz_origin_x = horiz_origin_x;
exports.horiz_origin_y = horiz_origin_y;
exports.id = id;
exports.ideographic = ideographic;
exports.in$prime = in$prime;
exports.in2 = in2;
exports.intercept = intercept;
exports.k = k;
exports.k1 = k1;
exports.k2 = k2;
exports.k3 = k3;
exports.k4 = k4;
exports.kernel_matrix = kernel_matrix;
exports.kernel_unit_length = kernel_unit_length;
exports.key_points = key_points;
exports.key_splines = key_splines;
exports.key_times = key_times;
exports.lang = lang;
exports.length_adjust = length_adjust;
exports.limiting_cone_angle = limiting_cone_angle;
exports.local = local;
exports.marker_height = marker_height;
exports.marker_units = marker_units;
exports.marker_width = marker_width;
exports.mask_content_units = mask_content_units;
exports.mask_units = mask_units;
exports.mathematical = mathematical;
exports.max = max;
exports.media = media;
exports.method$prime = method$prime;
exports.min = min;
exports.mode = mode;
exports.name = name;
exports.num_octaves = num_octaves;
exports.offset = offset;
exports.operator = operator;
exports.order = order;
exports.orient = orient;
exports.orientation = orientation;
exports.origin = origin;
exports.overline_position = overline_position;
exports.overline_thickness = overline_thickness;
exports.panose1 = panose1;
exports.path = path;
exports.path_length = path_length;
exports.pattern_content_units = pattern_content_units;
exports.pattern_transform = pattern_transform;
exports.pattern_units = pattern_units;
exports.point_order = point_order;
exports.points = points;
exports.points_at_x = points_at_x;
exports.points_at_y = points_at_y;
exports.points_at_z = points_at_z;
exports.preserve_alpha = preserve_alpha;
exports.preserve_aspect_ratio = preserve_aspect_ratio;
exports.primitive_units = primitive_units;
exports.r = r;
exports.radius = radius;
exports.ref_x = ref_x;
exports.ref_y = ref_y;
exports.rendering_intent = rendering_intent;
exports.repeat_count = repeat_count;
exports.repeat_dur = repeat_dur;
exports.required_extensions = required_extensions;
exports.required_features = required_features;
exports.restart = restart;
exports.result = result;
exports.rotate = rotate;
exports.rx = rx;
exports.ry = ry;
exports.scale = scale;
exports.seed = seed;
exports.slope = slope;
exports.spacing = spacing;
exports.specular_constant = specular_constant;
exports.specular_exponent = specular_exponent;
exports.speed = speed;
exports.spread_method = spread_method;
exports.start_offset = start_offset;
exports.std_deviation = std_deviation;
exports.stemh = stemh;
exports.stemv = stemv;
exports.stitch_tiles = stitch_tiles;
exports.strikethrough_position = strikethrough_position;
exports.strikethrough_thickness = strikethrough_thickness;
exports.string$prime = string$prime;
exports.style = style;
exports.surface_scale = surface_scale;
exports.system_language = system_language;
exports.table_values = table_values;
exports.target = target;
exports.target_x = target_x;
exports.target_y = target_y;
exports.text_length = text_length;
exports.title = title;
exports.to$prime = to$prime;
exports.transform = transform;
exports.type$prime = type$prime;
exports.u1 = u1;
exports.u2 = u2;
exports.underline_position = underline_position;
exports.underline_thickness = underline_thickness;
exports.unicode = unicode;
exports.unicode_range = unicode_range;
exports.units_per_em = units_per_em;
exports.v_alphabetic = v_alphabetic;
exports.v_hanging = v_hanging;
exports.v_ideographic = v_ideographic;
exports.v_mathematical = v_mathematical;
exports.values = values;
exports.version = version;
exports.vert_adv_y = vert_adv_y;
exports.vert_origin_x = vert_origin_x;
exports.vert_origin_y = vert_origin_y;
exports.view_box = view_box;
exports.view_target = view_target;
exports.width = width;
exports.widths = widths;
exports.x = x;
exports.x_height = x_height;
exports.x1 = x1;
exports.x2 = x2;
exports.x_channel_selector = x_channel_selector;
exports.xlink_actuate = xlink_actuate;
exports.xlink_arcrole = xlink_arcrole;
exports.xlink_href = xlink_href;
exports.xlink_role = xlink_role;
exports.xlink_show = xlink_show;
exports.xlink_title = xlink_title;
exports.xlink_type = xlink_type;
exports.xml_base = xml_base;
exports.xml_lang = xml_lang;
exports.xml_space = xml_space;
exports.y = y;
exports.y1 = y1;
exports.y2 = y2;
exports.y_channel_selector = y_channel_selector;
exports.z = z;
exports.zoom_and_pan = zoom_and_pan;
exports.alignment_baseline = alignment_baseline;
exports.baseline_shift = baseline_shift;
exports.clip_path = clip_path;
exports.clip_rule = clip_rule;
exports.clip = clip;
exports.color_interpolation_filters = color_interpolation_filters;
exports.color_interpolation = color_interpolation;
exports.color_profile = color_profile;
exports.color_rendering = color_rendering;
exports.color = color;
exports.cursor = cursor;
exports.direction = direction;
exports.display = display;
exports.dominant_baseline = dominant_baseline;
exports.enable_background = enable_background;
exports.fill_opacity = fill_opacity;
exports.fill_rule = fill_rule;
exports.fill = fill;
exports.filter = filter;
exports.flood_color = flood_color;
exports.flood_opacity = flood_opacity;
exports.font_family = font_family;
exports.font_size_adjust = font_size_adjust;
exports.font_size = font_size;
exports.font_stretch = font_stretch;
exports.font_style = font_style;
exports.font_variant = font_variant;
exports.font_weight = font_weight;
exports.glyph_orientation_horizontal = glyph_orientation_horizontal;
exports.glyph_orientation_vertical = glyph_orientation_vertical;
exports.image_rendering = image_rendering;
exports.kerning = kerning;
exports.letter_spacing = letter_spacing;
exports.lighting_color = lighting_color;
exports.marker_end = marker_end;
exports.marker_mid = marker_mid;
exports.marker_start = marker_start;
exports.mask = mask;
exports.opacity = opacity;
exports.overflow = overflow;
exports.pointer_events = pointer_events;
exports.shape_rendering = shape_rendering;
exports.stop_color = stop_color;
exports.stop_opacity = stop_opacity;
exports.stroke_dasharray = stroke_dasharray;
exports.stroke_dashoffset = stroke_dashoffset;
exports.stroke_linecap = stroke_linecap;
exports.stroke_linejoin = stroke_linejoin;
exports.stroke_miterlimit = stroke_miterlimit;
exports.stroke_opacity = stroke_opacity;
exports.stroke_width = stroke_width;
exports.stroke = stroke;
exports.text_anchor = text_anchor;
exports.text_decoration = text_decoration;
exports.text_rendering = text_rendering;
exports.unicode_bidi = unicode_bidi;
exports.visibility = visibility;
exports.word_spacing = word_spacing;
exports.writing_mode = writing_mode;
exports.on_click = on_click;
exports.on_mouse_down = on_mouse_down;
exports.on_mouse_up = on_mouse_up;
exports.on_mouse_over = on_mouse_over;
exports.on_mouse_out = on_mouse_out;
exports.on = on;
exports.prevent_default_on = prevent_default_on;
exports.stop_propagation_on = stop_propagation_on;
exports.custom = custom;
/* Decode-BsOakJson Not a pure module */
