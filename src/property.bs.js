// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE
'use strict';

var Encode$BsOakJson = require("@bs-oak/json/src/encode.bs.js");
var Virtual_dom$BsOakVirtualDom = require("@bs-oak/virtual-dom/src/virtual_dom.bs.js");

function string(key, value) {
  return Virtual_dom$BsOakVirtualDom.Property[/* create */0](key, Encode$BsOakJson.string(value));
}

function string_ns(namespace, key, value) {
  return Virtual_dom$BsOakVirtualDom.Property[/* create_ns */1](namespace, key, Encode$BsOakJson.string(value));
}

function accent_height(v) {
  return string("accent-height", v);
}

function accelerate(v) {
  return string("accelerate", v);
}

function accumulate(v) {
  return string("accumulate", v);
}

function additive(v) {
  return string("additive", v);
}

function alphabetic(v) {
  return string("alphabetic", v);
}

function allow_reorder(v) {
  return string("allowReorder", v);
}

function amplitude(v) {
  return string("amplitude", v);
}

function arabic_form(v) {
  return string("arabic-form", v);
}

function ascent(v) {
  return string("ascent", v);
}

function attribute_name(v) {
  return string("attributeName", v);
}

function attribute_type(v) {
  return string("attributeType", v);
}

function auto_reverse(v) {
  return string("autoReverse", v);
}

function azimuth(v) {
  return string("azimuth", v);
}

function base_frequency(v) {
  return string("baseFrequency", v);
}

function base_profile(v) {
  return string("baseProfile", v);
}

function bbox(v) {
  return string("bbox", v);
}

function begin$prime(v) {
  return string("begin", v);
}

function bias(v) {
  return string("bias", v);
}

function by(v) {
  return string("by", v);
}

function calc_mode(v) {
  return string("calcMode", v);
}

function cap_height(v) {
  return string("cap-height", v);
}

function class$prime(v) {
  return string("class", v);
}

function clip_path_units(v) {
  return string("clipPathUnits", v);
}

function content_script_type(v) {
  return string("contentScriptType", v);
}

function content_style_type(v) {
  return string("contentStyleType", v);
}

function cx(v) {
  return string("cx", v);
}

function cy(v) {
  return string("cy", v);
}

function d(v) {
  return string("d", v);
}

function decelerate(v) {
  return string("decelerate", v);
}

function descent(v) {
  return string("descent", v);
}

function diffuse_constant(v) {
  return string("diffuseConstant", v);
}

function divisor(v) {
  return string("divisor", v);
}

function dur(v) {
  return string("dur", v);
}

function dx(v) {
  return string("dx", v);
}

function dy(v) {
  return string("dy", v);
}

function edge_mode(v) {
  return string("edgeMode", v);
}

function elevation(v) {
  return string("elevation", v);
}

function end$prime(v) {
  return string("end", v);
}

function exponent(v) {
  return string("exponent", v);
}

function external_resources_required(v) {
  return string("externalResourcesRequired", v);
}

function filter_res(v) {
  return string("filterRes", v);
}

function filter_units(v) {
  return string("filterUnits", v);
}

function format(v) {
  return string("format", v);
}

function from(v) {
  return string("from", v);
}

function fx(v) {
  return string("fx", v);
}

function fy(v) {
  return string("fy", v);
}

function g1(v) {
  return string("g1", v);
}

function g2(v) {
  return string("g2", v);
}

function glyph_name(v) {
  return string("glyph-name", v);
}

function glyph_ref(v) {
  return string("glyphRef", v);
}

function gradient_transform(v) {
  return string("gradientTransform", v);
}

function gradient_units(v) {
  return string("gradientUnits", v);
}

function hanging(v) {
  return string("hanging", v);
}

function height(v) {
  return string("height", v);
}

function horiz_adv_x(v) {
  return string("horiz-adv-x", v);
}

function horiz_origin_x(v) {
  return string("horiz-origin-x", v);
}

function horiz_origin_y(v) {
  return string("horiz-origin-y", v);
}

function id(v) {
  return string("id", v);
}

function ideographic(v) {
  return string("ideographic", v);
}

function in$prime(v) {
  return string("in", v);
}

function in2(v) {
  return string("in2", v);
}

function intercept(v) {
  return string("intercept", v);
}

function k(v) {
  return string("k", v);
}

function k1(v) {
  return string("k1", v);
}

function k2(v) {
  return string("k2", v);
}

function k3(v) {
  return string("k3", v);
}

function k4(v) {
  return string("k4", v);
}

function kernel_matrix(v) {
  return string("kernelMatrix", v);
}

function kernel_unit_length(v) {
  return string("kernelUnitLength", v);
}

function key_points(v) {
  return string("keyPoints", v);
}

function key_splines(v) {
  return string("keySplines", v);
}

function key_times(v) {
  return string("keyTimes", v);
}

function lang(v) {
  return string("lang", v);
}

function length_adjust(v) {
  return string("lengthAdjust", v);
}

function limiting_cone_angle(v) {
  return string("limitingConeAngle", v);
}

function local(v) {
  return string("local", v);
}

function marker_height(v) {
  return string("markerHeight", v);
}

function marker_units(v) {
  return string("markerUnits", v);
}

function marker_width(v) {
  return string("markerWidth", v);
}

function mask_content_units(v) {
  return string("maskContentUnits", v);
}

function mask_units(v) {
  return string("maskUnits", v);
}

function mathematical(v) {
  return string("mathematical", v);
}

function max(v) {
  return string("max", v);
}

function media(v) {
  return string("media", v);
}

function method$prime(v) {
  return string("method", v);
}

function min(v) {
  return string("min", v);
}

function mode(v) {
  return string("mode", v);
}

function name(v) {
  return string("name", v);
}

function num_octaves(v) {
  return string("numOctaves", v);
}

function offset(v) {
  return string("offset", v);
}

function operator(v) {
  return string("operator", v);
}

function order(v) {
  return string("order", v);
}

function orient(v) {
  return string("orient", v);
}

function orientation(v) {
  return string("orientation", v);
}

function origin(v) {
  return string("origin", v);
}

function overline_position(v) {
  return string("overline-position", v);
}

function overline_thickness(v) {
  return string("overline-thickness", v);
}

function panose1(v) {
  return string("panose-1", v);
}

function path(v) {
  return string("path", v);
}

function path_length(v) {
  return string("pathLength", v);
}

function pattern_content_units(v) {
  return string("patternContentUnits", v);
}

function pattern_transform(v) {
  return string("patternTransform", v);
}

function pattern_units(v) {
  return string("patternUnits", v);
}

function point_order(v) {
  return string("point-order", v);
}

function points(v) {
  return string("points", v);
}

function points_at_x(v) {
  return string("pointsAtX", v);
}

function points_at_y(v) {
  return string("pointsAtY", v);
}

function points_at_z(v) {
  return string("pointsAtZ", v);
}

function preserve_alpha(v) {
  return string("preserveAlpha", v);
}

function preserve_aspect_ratio(v) {
  return string("preserveAspectRatio", v);
}

function primitive_units(v) {
  return string("primitiveUnits", v);
}

function r(v) {
  return string("r", v);
}

function radius(v) {
  return string("radius", v);
}

function ref_x(v) {
  return string("refX", v);
}

function ref_y(v) {
  return string("refY", v);
}

function rendering_intent(v) {
  return string("rendering-intent", v);
}

function repeat_count(v) {
  return string("repeatCount", v);
}

function repeat_dur(v) {
  return string("repeatDur", v);
}

function required_extensions(v) {
  return string("requiredExtensions", v);
}

function required_features(v) {
  return string("requiredFeatures", v);
}

function restart(v) {
  return string("restart", v);
}

function result(v) {
  return string("result", v);
}

function rotate(v) {
  return string("rotate", v);
}

function rx(v) {
  return string("rx", v);
}

function ry(v) {
  return string("ry", v);
}

function scale(v) {
  return string("scale", v);
}

function seed(v) {
  return string("seed", v);
}

function slope(v) {
  return string("slope", v);
}

function spacing(v) {
  return string("spacing", v);
}

function specular_constant(v) {
  return string("specularConstant", v);
}

function specular_exponent(v) {
  return string("specularExponent", v);
}

function speed(v) {
  return string("speed", v);
}

function spread_method(v) {
  return string("spreadMethod", v);
}

function start_offset(v) {
  return string("startOffset", v);
}

function std_deviation(v) {
  return string("stdDeviation", v);
}

function stemh(v) {
  return string("stemh", v);
}

function stemv(v) {
  return string("stemv", v);
}

function stitch_tiles(v) {
  return string("stitchTiles", v);
}

function strikethrough_position(v) {
  return string("strikethrough-position", v);
}

function strikethrough_thickness(v) {
  return string("strikethrough-thickness", v);
}

function string$prime(v) {
  return string("string", v);
}

function style(v) {
  return string("style", v);
}

function surface_scale(v) {
  return string("surfaceScale", v);
}

function system_language(v) {
  return string("systemLanguage", v);
}

function table_values(v) {
  return string("tableValues", v);
}

function target(v) {
  return string("target", v);
}

function target_x(v) {
  return string("targetX", v);
}

function target_y(v) {
  return string("targetY", v);
}

function text_length(v) {
  return string("textLength", v);
}

function title(v) {
  return string("title", v);
}

function to$prime(v) {
  return string("to", v);
}

function transform(v) {
  return string("transform", v);
}

function type$prime(v) {
  return string("type", v);
}

function u1(v) {
  return string("u1", v);
}

function u2(v) {
  return string("u2", v);
}

function underline_position(v) {
  return string("underline-position", v);
}

function underline_thickness(v) {
  return string("underline-thickness", v);
}

function unicode(v) {
  return string("unicode", v);
}

function unicode_range(v) {
  return string("unicode-range", v);
}

function units_per_em(v) {
  return string("units-per-em", v);
}

function v_alphabetic(v) {
  return string("v-alphabetic", v);
}

function v_hanging(v) {
  return string("v-hanging", v);
}

function v_ideographic(v) {
  return string("v-ideographic", v);
}

function v_mathematical(v) {
  return string("v-mathematical", v);
}

function values(v) {
  return string("values", v);
}

function version(v) {
  return string("version", v);
}

function vert_adv_y(v) {
  return string("vert-adv-y", v);
}

function vert_origin_x(v) {
  return string("vert-origin-x", v);
}

function vert_origin_y(v) {
  return string("vert-origin-y", v);
}

function view_box(v) {
  return string("viewBox", v);
}

function view_target(v) {
  return string("viewTarget", v);
}

function width(v) {
  return string("width", v);
}

function widths(v) {
  return string("widths", v);
}

function x(v) {
  return string("x", v);
}

function x_height(v) {
  return string("x-height", v);
}

function x1(v) {
  return string("x1", v);
}

function x2(v) {
  return string("x2", v);
}

function x_channel_selector(v) {
  return string("xChannelSelector", v);
}

function xlink_actuate(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:actuate", v);
}

function xlink_arcrole(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:arcrole", v);
}

function xlink_href(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:href", v);
}

function xlink_role(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:role", v);
}

function xlink_show(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:show", v);
}

function xlink_title(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:title", v);
}

function xlink_type(v) {
  return string_ns("http://www.w3.org/1999/xlink", "xlink:type", v);
}

function xml_base(v) {
  return string_ns("http://www.w3.org/XML/1998/namespace", "xml:base", v);
}

function xml_lang(v) {
  return string_ns("http://www.w3.org/XML/1998/namespace", "xml:lang", v);
}

function xml_space(v) {
  return string_ns("http://www.w3.org/XML/1998/namespace", "xml:space", v);
}

function y(v) {
  return string("y", v);
}

function y1(v) {
  return string("y1", v);
}

function y2(v) {
  return string("y2", v);
}

function y_channel_selector(v) {
  return string("yChannelSelector", v);
}

function z(v) {
  return string("z", v);
}

function zoom_and_pan(v) {
  return string("zoomAndPan", v);
}

function alignment_baseline(v) {
  return string("alignment-baseline", v);
}

function baseline_shift(v) {
  return string("baseline-shift", v);
}

function clip_path(v) {
  return string("clip-path", v);
}

function clip_rule(v) {
  return string("clip-rule", v);
}

function clip(v) {
  return string("clip", v);
}

function color_interpolation_filters(v) {
  return string("color-interpolation-filters", v);
}

function color_interpolation(v) {
  return string("color-interpolation", v);
}

function color_profile(v) {
  return string("color-profile", v);
}

function color_rendering(v) {
  return string("color-rendering", v);
}

function color(v) {
  return string("color", v);
}

function cursor(v) {
  return string("cursor", v);
}

function direction(v) {
  return string("direction", v);
}

function display(v) {
  return string("display", v);
}

function dominant_baseline(v) {
  return string("dominant-baseline", v);
}

function enable_background(v) {
  return string("enable-background", v);
}

function fill_opacity(v) {
  return string("fill-opacity", v);
}

function fill_rule(v) {
  return string("fill-rule", v);
}

function fill(v) {
  return string("fill", v);
}

function filter(v) {
  return string("filter", v);
}

function flood_color(v) {
  return string("flood-color", v);
}

function flood_opacity(v) {
  return string("flood-opacity", v);
}

function font_family(v) {
  return string("font-family", v);
}

function font_size_adjust(v) {
  return string("font-size-adjust", v);
}

function font_size(v) {
  return string("font-size", v);
}

function font_stretch(v) {
  return string("font-stretch", v);
}

function font_style(v) {
  return string("font-style", v);
}

function font_variant(v) {
  return string("font-variant", v);
}

function font_weight(v) {
  return string("font-weight", v);
}

function glyph_orientation_horizontal(v) {
  return string("glyph-orientation-horizontal", v);
}

function glyph_orientation_vertical(v) {
  return string("glyph-orientation-vertical", v);
}

function image_rendering(v) {
  return string("image-rendering", v);
}

function kerning(v) {
  return string("kerning", v);
}

function letter_spacing(v) {
  return string("letter-spacing", v);
}

function lighting_color(v) {
  return string("lighting-color", v);
}

function marker_end(v) {
  return string("marker-end", v);
}

function marker_mid(v) {
  return string("marker-mid", v);
}

function marker_start(v) {
  return string("marker-start", v);
}

function mask(v) {
  return string("mask", v);
}

function opacity(v) {
  return string("opacity", v);
}

function overflow(v) {
  return string("overflow", v);
}

function pointer_events(v) {
  return string("pointer-events", v);
}

function shape_rendering(v) {
  return string("shape-rendering", v);
}

function stop_color(v) {
  return string("stop-color", v);
}

function stop_opacity(v) {
  return string("stop-opacity", v);
}

function stroke_dasharray(v) {
  return string("stroke-dasharray", v);
}

function stroke_dashoffset(v) {
  return string("stroke-dashoffset", v);
}

function stroke_linecap(v) {
  return string("stroke-linecap", v);
}

function stroke_linejoin(v) {
  return string("stroke-linejoin", v);
}

function stroke_miterlimit(v) {
  return string("stroke-miterlimit", v);
}

function stroke_opacity(v) {
  return string("stroke-opacity", v);
}

function stroke_width(v) {
  return string("stroke-width", v);
}

function stroke(v) {
  return string("stroke", v);
}

function text_anchor(v) {
  return string("text-anchor", v);
}

function text_decoration(v) {
  return string("text-decoration", v);
}

function text_rendering(v) {
  return string("text-rendering", v);
}

function unicode_bidi(v) {
  return string("unicode-bidi", v);
}

function visibility(v) {
  return string("visibility", v);
}

function word_spacing(v) {
  return string("word-spacing", v);
}

function writing_mode(v) {
  return string("writing-mode", v);
}

exports.accent_height = accent_height;
exports.accelerate = accelerate;
exports.accumulate = accumulate;
exports.additive = additive;
exports.alphabetic = alphabetic;
exports.allow_reorder = allow_reorder;
exports.amplitude = amplitude;
exports.arabic_form = arabic_form;
exports.ascent = ascent;
exports.attribute_name = attribute_name;
exports.attribute_type = attribute_type;
exports.auto_reverse = auto_reverse;
exports.azimuth = azimuth;
exports.base_frequency = base_frequency;
exports.base_profile = base_profile;
exports.bbox = bbox;
exports.begin$prime = begin$prime;
exports.bias = bias;
exports.by = by;
exports.calc_mode = calc_mode;
exports.cap_height = cap_height;
exports.class$prime = class$prime;
exports.clip_path_units = clip_path_units;
exports.content_script_type = content_script_type;
exports.content_style_type = content_style_type;
exports.cx = cx;
exports.cy = cy;
exports.d = d;
exports.decelerate = decelerate;
exports.descent = descent;
exports.diffuse_constant = diffuse_constant;
exports.divisor = divisor;
exports.dur = dur;
exports.dx = dx;
exports.dy = dy;
exports.edge_mode = edge_mode;
exports.elevation = elevation;
exports.end$prime = end$prime;
exports.exponent = exponent;
exports.external_resources_required = external_resources_required;
exports.filter_res = filter_res;
exports.filter_units = filter_units;
exports.format = format;
exports.from = from;
exports.fx = fx;
exports.fy = fy;
exports.g1 = g1;
exports.g2 = g2;
exports.glyph_name = glyph_name;
exports.glyph_ref = glyph_ref;
exports.gradient_transform = gradient_transform;
exports.gradient_units = gradient_units;
exports.hanging = hanging;
exports.height = height;
exports.horiz_adv_x = horiz_adv_x;
exports.horiz_origin_x = horiz_origin_x;
exports.horiz_origin_y = horiz_origin_y;
exports.id = id;
exports.ideographic = ideographic;
exports.in$prime = in$prime;
exports.in2 = in2;
exports.intercept = intercept;
exports.k = k;
exports.k1 = k1;
exports.k2 = k2;
exports.k3 = k3;
exports.k4 = k4;
exports.kernel_matrix = kernel_matrix;
exports.kernel_unit_length = kernel_unit_length;
exports.key_points = key_points;
exports.key_splines = key_splines;
exports.key_times = key_times;
exports.lang = lang;
exports.length_adjust = length_adjust;
exports.limiting_cone_angle = limiting_cone_angle;
exports.local = local;
exports.marker_height = marker_height;
exports.marker_units = marker_units;
exports.marker_width = marker_width;
exports.mask_content_units = mask_content_units;
exports.mask_units = mask_units;
exports.mathematical = mathematical;
exports.max = max;
exports.media = media;
exports.method$prime = method$prime;
exports.min = min;
exports.mode = mode;
exports.name = name;
exports.num_octaves = num_octaves;
exports.offset = offset;
exports.operator = operator;
exports.order = order;
exports.orient = orient;
exports.orientation = orientation;
exports.origin = origin;
exports.overline_position = overline_position;
exports.overline_thickness = overline_thickness;
exports.panose1 = panose1;
exports.path = path;
exports.path_length = path_length;
exports.pattern_content_units = pattern_content_units;
exports.pattern_transform = pattern_transform;
exports.pattern_units = pattern_units;
exports.point_order = point_order;
exports.points = points;
exports.points_at_x = points_at_x;
exports.points_at_y = points_at_y;
exports.points_at_z = points_at_z;
exports.preserve_alpha = preserve_alpha;
exports.preserve_aspect_ratio = preserve_aspect_ratio;
exports.primitive_units = primitive_units;
exports.r = r;
exports.radius = radius;
exports.ref_x = ref_x;
exports.ref_y = ref_y;
exports.rendering_intent = rendering_intent;
exports.repeat_count = repeat_count;
exports.repeat_dur = repeat_dur;
exports.required_extensions = required_extensions;
exports.required_features = required_features;
exports.restart = restart;
exports.result = result;
exports.rotate = rotate;
exports.rx = rx;
exports.ry = ry;
exports.scale = scale;
exports.seed = seed;
exports.slope = slope;
exports.spacing = spacing;
exports.specular_constant = specular_constant;
exports.specular_exponent = specular_exponent;
exports.speed = speed;
exports.spread_method = spread_method;
exports.start_offset = start_offset;
exports.std_deviation = std_deviation;
exports.stemh = stemh;
exports.stemv = stemv;
exports.stitch_tiles = stitch_tiles;
exports.strikethrough_position = strikethrough_position;
exports.strikethrough_thickness = strikethrough_thickness;
exports.string$prime = string$prime;
exports.style = style;
exports.surface_scale = surface_scale;
exports.system_language = system_language;
exports.table_values = table_values;
exports.target = target;
exports.target_x = target_x;
exports.target_y = target_y;
exports.text_length = text_length;
exports.title = title;
exports.to$prime = to$prime;
exports.transform = transform;
exports.type$prime = type$prime;
exports.u1 = u1;
exports.u2 = u2;
exports.underline_position = underline_position;
exports.underline_thickness = underline_thickness;
exports.unicode = unicode;
exports.unicode_range = unicode_range;
exports.units_per_em = units_per_em;
exports.v_alphabetic = v_alphabetic;
exports.v_hanging = v_hanging;
exports.v_ideographic = v_ideographic;
exports.v_mathematical = v_mathematical;
exports.values = values;
exports.version = version;
exports.vert_adv_y = vert_adv_y;
exports.vert_origin_x = vert_origin_x;
exports.vert_origin_y = vert_origin_y;
exports.view_box = view_box;
exports.view_target = view_target;
exports.width = width;
exports.widths = widths;
exports.x = x;
exports.x_height = x_height;
exports.x1 = x1;
exports.x2 = x2;
exports.x_channel_selector = x_channel_selector;
exports.xlink_actuate = xlink_actuate;
exports.xlink_arcrole = xlink_arcrole;
exports.xlink_href = xlink_href;
exports.xlink_role = xlink_role;
exports.xlink_show = xlink_show;
exports.xlink_title = xlink_title;
exports.xlink_type = xlink_type;
exports.xml_base = xml_base;
exports.xml_lang = xml_lang;
exports.xml_space = xml_space;
exports.y = y;
exports.y1 = y1;
exports.y2 = y2;
exports.y_channel_selector = y_channel_selector;
exports.z = z;
exports.zoom_and_pan = zoom_and_pan;
exports.alignment_baseline = alignment_baseline;
exports.baseline_shift = baseline_shift;
exports.clip_path = clip_path;
exports.clip_rule = clip_rule;
exports.clip = clip;
exports.color_interpolation_filters = color_interpolation_filters;
exports.color_interpolation = color_interpolation;
exports.color_profile = color_profile;
exports.color_rendering = color_rendering;
exports.color = color;
exports.cursor = cursor;
exports.direction = direction;
exports.display = display;
exports.dominant_baseline = dominant_baseline;
exports.enable_background = enable_background;
exports.fill_opacity = fill_opacity;
exports.fill_rule = fill_rule;
exports.fill = fill;
exports.filter = filter;
exports.flood_color = flood_color;
exports.flood_opacity = flood_opacity;
exports.font_family = font_family;
exports.font_size_adjust = font_size_adjust;
exports.font_size = font_size;
exports.font_stretch = font_stretch;
exports.font_style = font_style;
exports.font_variant = font_variant;
exports.font_weight = font_weight;
exports.glyph_orientation_horizontal = glyph_orientation_horizontal;
exports.glyph_orientation_vertical = glyph_orientation_vertical;
exports.image_rendering = image_rendering;
exports.kerning = kerning;
exports.letter_spacing = letter_spacing;
exports.lighting_color = lighting_color;
exports.marker_end = marker_end;
exports.marker_mid = marker_mid;
exports.marker_start = marker_start;
exports.mask = mask;
exports.opacity = opacity;
exports.overflow = overflow;
exports.pointer_events = pointer_events;
exports.shape_rendering = shape_rendering;
exports.stop_color = stop_color;
exports.stop_opacity = stop_opacity;
exports.stroke_dasharray = stroke_dasharray;
exports.stroke_dashoffset = stroke_dashoffset;
exports.stroke_linecap = stroke_linecap;
exports.stroke_linejoin = stroke_linejoin;
exports.stroke_miterlimit = stroke_miterlimit;
exports.stroke_opacity = stroke_opacity;
exports.stroke_width = stroke_width;
exports.stroke = stroke;
exports.text_anchor = text_anchor;
exports.text_decoration = text_decoration;
exports.text_rendering = text_rendering;
exports.unicode_bidi = unicode_bidi;
exports.visibility = visibility;
exports.word_spacing = word_spacing;
exports.writing_mode = writing_mode;
/* Encode-BsOakJson Not a pure module */
